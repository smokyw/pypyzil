from re import compile
from typing import Tuple
from urllib.parse import quote

# Компилированный регулярное выражение для поиска и замены последовательностей пробелов
# Сопоставляет обычные пробелы (\s) и неразрывные пробелы ( )
regex_space = compile(r"[\s ]+")
# Компилированное регулярное выражение для извлечения чисел из строк
regx_price = compile(r"\d+")


def remove_space(value: str) -> str:
    """
    Удаляет нежелательные пробелы в заданной строке
    
    Аргументы:
        value (str): входная строка с нежелательными пробелами
    
    Возвращает:
        str: строка с одиночными пробелами
    """
    # Удаляем начальные и конечные пробелы, затем заменяем все последовательности
    # пробелов (включая специальные символы пробелов) на один обычный пробел
    return regex_space.sub(" ", value.strip())


def get_nested_value(dic, key_path, default=None):
    """
    Получает вложенное значение из словаря по пути ключей, разделенных точками
    
    Аргументы:
        dic: словарь, из которого извлекается значение
        key_path (str): путь к ключу, разделенный точками (например, "key1.key2.key3")
        default: значение по умолчанию, возвращаемое, если путь не найден
    
    Возвращает:
        Значение по указанному пути или значение по умолчанию
    """
    # Разбиваем путь ключа на отдельные ключи, используя точку как разделитель
    keys = key_path.split(".")
    # Начинаем с исходного словаря
    current = dic
    # Проходим по каждому ключу в пути
    for key in keys:
        # Получаем значение по текущему ключу или пустой словарь, если ключ не существует
        current = current.get(key, {})
        # Проверяем, является ли текущее значение пустым словарем или None
        if current == {} or current is None:
            # Возвращаем значение по умолчанию, если ключ не найден
            return default
    # Возвращаем найденное значение
    return current

def parse_proxy(ip_or_domain: str, port: str, username: str, password: str) -> str:
    """
    Генерирует URL прокси-сервера с аутентификацией
    
    Аргументы:
        ip_or_domain (str): IP-адрес или домен прокси-сервера
        port (str): порт прокси-сервера
        username (str): имя пользователя для аутентификации
        password (str): пароль для аутентификации
    
    Возвращает:
        str: URL прокси-сервера в формате http://username:password@ip:port
    """
    # Кодируем имя пользователя для URL (экранируем специальные символы)
    encoded_username = quote(username)
    # Кодируем пароль для URL (экранируем специальные символы)
    encoded_password = quote(password)
    # Формируем URL прокси-сервера с аутентификацией
    proxy_url = f"http://{encoded_username}:{encoded_password}@{ip_or_domain}:{port}"
    # Возвращаем сформированный URL прокси-сервера
    return proxy_url
